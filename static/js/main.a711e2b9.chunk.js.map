{"version":3,"sources":["todos.js","addFormTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","content","onClick","AddTodo","state","handleChange","e","setState","target","value","handleDateOfFinish","dateOfFinish","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","dateOfInput","status","newTodos","filter","lastId","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OA0BeA,G,MAvBD,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WACdC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,6BAA6BC,IAAKF,EAAKG,IAClD,yBAAKF,UAAU,IACX,4CAAcD,EAAKG,GAAnB,YAAyBH,EAAKI,UAC1B,4BACIH,UAAU,kBACVI,QAAS,WAAQT,EAAWI,EAAKG,MAFrC,oBAWpB,uBAAGF,UAAU,UAAb,2BAEJ,OAAO,yBAAKA,UAAU,oBAAoBJ,KCrBzBS,E,2MACjBC,MAAQ,CACJJ,GAAI,GACJC,QAAS,I,EAKbI,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVN,QAASK,EAAEE,OAAOC,S,EAG1BC,mBAAqB,SAACJ,GAClB,EAAKC,SAAS,CACVI,aAAcL,EAAEE,OAAOC,S,EAG/BG,aAAe,SAACN,GACZA,EAAEO,iBACF,EAAKC,MAAMC,QAAQ,EAAKX,OACxB,EAAKG,SAAS,CAACN,QAAS,M,wEAIxB,OACI,6BACI,0BAAMe,SAAUC,KAAKL,cACjB,iDACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKZ,aAAcI,MAAOQ,KAAKb,MAAMH,UAGlE,4BAAQH,UAAU,mBAAlB,gB,GAhCiBsB,aC+CtBC,E,2MA5CXjB,MAAQ,CAEJZ,MAAO,CACH,CAACQ,GAAI,EACDC,QAAS,2BACTU,aAAc,mBACdW,YAAa,mBACbC,OAAQ,GACZ,CAACvB,GAAI,EACDC,QAAS,qBACTU,aAAc,mBACdW,YAAa,mBACbC,OAAQ,GACZ,CAACvB,GAAI,EACDC,QAAS,kBACTU,aAAc,mBACdW,YAAa,mBACbC,OAAQ,K,EAGpB9B,WAAa,SAACO,GACV,IAAMwB,EAAW,EAAKpB,MAAMZ,MAAMiC,QAAO,SAAA5B,GACrC,OAAOA,EAAKG,KAAOA,KAEvB,EAAKO,SAAS,CAACf,MAAOgC,K,EAE1BT,QAAU,SAAClB,GACP,IAAI6B,EAAS,EAAKtB,MAAMZ,MAAMG,OAAS,EACvCE,EAAKG,GAAM,EAAKI,MAAMZ,MAAMkC,GAAQ1B,GAAK,EACzC,IAAIwB,EAAQ,sBAAO,EAAKpB,MAAMZ,OAAlB,CAAyBK,IACrC,EAAKU,SAAS,CAACf,MAAOgC,K,wEAGtB,OACI,yBAAK1B,UAAU,sBACX,wBAAIA,UAAU,+BAAd,eACA,kBAAC,EAAD,CAAON,MAAOyB,KAAKb,MAAMZ,MAAOC,WAAYwB,KAAKxB,aACjD,kBAAC,EAAD,CAASsB,QAASE,KAAKF,e,GAtCrBK,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a711e2b9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport s from \"./innerstyle.css\";\r\n\r\nconst Todos = ({ todos, deleteTodo }) => {\r\n    const todoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return (\r\n                <div className=\"collection-item add_height\" key={todo.id}>\r\n                    <div className=\"\">\r\n                        <span>{`id: ${todo.id} ${todo.content}`}</span>\r\n                            <button\r\n                                className=\"btn-small right\"\r\n                                onClick={() => { deleteTodo(todo.id); }}\r\n                            >\r\n                                Delete todo\r\n                            </button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        })\r\n    ) : (\r\n        <p className=\"center\">There is no todos left!</p>\r\n    );\r\n    return <div className=\"todos collection\">{todoList}</div>;\r\n};\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react'\r\n\r\nexport default class AddTodo extends Component {\r\n    state = {\r\n        id: \"\",\r\n        content: \"\",\r\n        // dateOfFinish: \"\", \r\n        // dateOfInput: \"\",\r\n        // status: 1\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n    handleDateOfFinish = (e) => {\r\n        this.setState({\r\n            dateOfFinish: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state);\r\n        this.setState({content: \"\"})\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>Add new Todo: </label>\r\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content} />\r\n                    {/* <label>Set time to finish: </label>\r\n                    <input type=\"date\" onChange={this.handleDateOfFinish} /> */}\r\n                    <button className=\"btn-small right\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport Todos from './todos';\nimport AddTodo from './addFormTodo';\n\nclass App extends Component {\n    state = {\n        // status: 0 - failed, 1 - in work, 2 - complete ???\n        todos: [\n            {id: 1, \n                content: \"be like all, do the ToDo\", \n                dateOfFinish: \"00:00 07.02.2020\", \n                dateOfInput: \"20:51 30.01.2020\",\n                status: 1},\n            {id: 2, \n                content: \"Make it with Redux\", \n                dateOfFinish: \"00:00 14.02.2020\", \n                dateOfInput: \"20:51 30.01.2020\",\n                status: 1},\n            {id: 3, \n                content: \"Use Material UI\", \n                dateOfFinish: \"00:00 07.02.2020\", \n                dateOfInput: \"20:51 30.01.2020\",\n                status: 1}\n        ]\n    }\n    deleteTodo = (id) => {\n        const newTodos = this.state.todos.filter(todo => {\n            return todo.id !== id\n        })\n        this.setState({todos: newTodos})\n    }\n    addTodo = (todo) => {\n        let lastId = this.state.todos.length - 1;\n        todo.id = (this.state.todos[lastId].id + 1)\n        let newTodos = [...this.state.todos, todo]\n        this.setState({todos: newTodos})\n    }\n    render() {\n        return (\n            <div className=\"todo_spa container\">\n                <h1 className=\"center blue-text brand-logo\">Todo's list</h1>\n                <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n                <AddTodo addTodo={this.addTodo} />\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}